{
  "scopeName": "source.sharp",
  "patterns": [
    {
      "name": "keyword.other.modifier.cs",
      "match": "\\b(public|private|protected|internal|static|abstract|virtual|override|readonly|sealed|const|async|extern|volatile|unsafe|partial|new)\\b"
    },
    {
      "name": "storage.type.primitive.cs",
      "match": "\\b(bool|byte|char|decimal|double|float|int|long|object|sbyte|short|string|uint|ulong|ushort|void|dynamic)\\b"
    },
    {
      "name": "keyword.control.cs",
      "match": "\\b(if|else|switch|case|default|while|do|for|foreach|in|break|continue|goto|return|yield|throw|try|catch|finally|when)\\b"
    },
    {
      "name": "keyword.operator.cs",
      "match": "\\b(is|as|sizeof|typeof|nameof|checked|unchecked|stackalloc)\\b"
    },
    {
      "name": "variable.language.cs",
      "match": "\\b(base|this|value)\\b"
    },
    {
      "name": "keyword.other.cs",
      "match": "\\b(get|set|add|remove|global|alias)\\b"
    },
    {
      "name": "keyword.declaration.class.cs",
      "match": "\\b(class|struct|interface|enum|delegate|namespace|using)\\b"
    },
    {
      "name": "constant.language.cs",
      "match": "\\b(true|false|null)\\b"
    },
    {
      "name": "keyword.other.linq.cs",
      "match": "\\b(from|where|select|group|into|orderby|join|let|on|equals|by)\\b"
    },
    {
      "name": "meta.attribute.cs",
      "match": "\\[\\s*\\b[A-Z][A-Za-z0-9_]*\\b.*?\\]"
    },
    {
      "name": "meta.preprocessor.cs",
      "match": "^\\s*#(define|undef|if|elif|else|endif|region|endregion|error|warning|line|pragma)\\b.*"
    },
    {
      "name": "comment.line.double-slash.cs",
      "begin": "//",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.comment.cs" }
      },
      "end": "$",
      "patterns": []
    },
    {
      "name": "comment.block.cs",
      "begin": "/\\*",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.comment.cs" }
      },
      "end": "\\*/",
      "endCaptures": {
        "0": { "name": "punctuation.definition.comment.cs" }
      },
      "patterns": []
    },
    {
      "name": "entity.name.function.cs",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
    },
    {
      "name": "entity.name.type.class.cs",
      "match": "\\b(class|struct|enum|interface)\\s+([A-Z][A-Za-z0-9_]*)",
      "captures": {
        "2": { "name": "entity.name.type.class.cs" }
      }
    }
  ]
}
